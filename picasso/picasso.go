// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 15 May 2025 12:20:20 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package picasso

/*
#include "include/picasso.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Version function as declared in include/picasso.h:235
func Version() int32 {
	__ret := C.ps_version()
	__v := (int32)(__ret)
	return __v
}

// Initialize function as declared in include/picasso.h:247
func Initialize() Bool {
	__ret := C.ps_initialize()
	__v := (Bool)(__ret)
	return __v
}

// Shutdown function as declared in include/picasso.h:257
func Shutdown() {
	C.ps_shutdown()
}

// LastStatus function as declared in include/picasso.h:298
func LastStatus() Status {
	__ret := C.ps_last_status()
	__v := (Status)(__ret)
	return __v
}

// ContextCreate function as declared in include/picasso.h:325
func ContextCreate(canvas *Canvas, sharedContext *Context) *Context {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	csharedContext, csharedContextAllocMap := (*C.ps_context)(unsafe.Pointer(sharedContext)), cgoAllocsUnknown
	__ret := C.ps_context_create(ccanvas, csharedContext)
	runtime.KeepAlive(csharedContextAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Context)(unsafe.Pointer(&__ret))
	return __v
}

// ContextRef function as declared in include/picasso.h:340
func ContextRef(ctx *Context) *Context {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.ps_context_ref(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**Context)(unsafe.Pointer(&__ret))
	return __v
}

// ContextUnref function as declared in include/picasso.h:351
func ContextUnref(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_context_unref(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// ContextSetCanvas function as declared in include/picasso.h:367
func ContextSetCanvas(ctx *Context, canvas *Canvas) *Canvas {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	__ret := C.ps_context_set_canvas(cctx, ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// ContextGetCanvas function as declared in include/picasso.h:382
func ContextGetCanvas(ctx *Context) *Canvas {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.ps_context_get_canvas(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasCreate function as declared in include/picasso.h:453
func CanvasCreate(fmt ColorFormat, width int32, height int32) *Canvas {
	cfmt, cfmtAllocMap := (C.ps_color_format)(fmt), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	__ret := C.ps_canvas_create(cfmt, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasCreateWithData function as declared in include/picasso.h:474
func CanvasCreateWithData(data *Byte, fmt ColorFormat, width int32, height int32, pitch int32) *Canvas {
	cdata, cdataAllocMap := (*C.ps_byte)(unsafe.Pointer(data)), cgoAllocsUnknown
	cfmt, cfmtAllocMap := (C.ps_color_format)(fmt), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	cpitch, cpitchAllocMap := (C.int32_t)(pitch), cgoAllocsUnknown
	__ret := C.ps_canvas_create_with_data(cdata, cfmt, cwidth, cheight, cpitch)
	runtime.KeepAlive(cpitchAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasCreateCompatible function as declared in include/picasso.h:495
func CanvasCreateCompatible(canvas *Canvas, width int32, height int32) *Canvas {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	__ret := C.ps_canvas_create_compatible(ccanvas, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasCreateFromCanvas function as declared in include/picasso.h:514
func CanvasCreateFromCanvas(canvas *Canvas, rect *Rect) *Canvas {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	__ret := C.ps_canvas_create_from_canvas(ccanvas, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasCreateFromImage function as declared in include/picasso.h:532
func CanvasCreateFromImage(img *Image, rect *Rect) *Canvas {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	__ret := C.ps_canvas_create_from_image(cimg, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cimgAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasCreateFromMask function as declared in include/picasso.h:550
func CanvasCreateFromMask(mask *Mask, rect *Rect) *Canvas {
	cmask, cmaskAllocMap := (*C.ps_mask)(unsafe.Pointer(mask)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	__ret := C.ps_canvas_create_from_mask(cmask, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cmaskAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasReplaceData function as declared in include/picasso.h:574
func CanvasReplaceData(canvas *Canvas, data *Byte, fmt ColorFormat, width int32, height int32, pitch int32) *Canvas {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	cdata, cdataAllocMap := (*C.ps_byte)(unsafe.Pointer(data)), cgoAllocsUnknown
	cfmt, cfmtAllocMap := (C.ps_color_format)(fmt), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	cpitch, cpitchAllocMap := (C.int32_t)(pitch), cgoAllocsUnknown
	__ret := C.ps_canvas_replace_data(ccanvas, cdata, cfmt, cwidth, cheight, cpitch)
	runtime.KeepAlive(cpitchAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasRef function as declared in include/picasso.h:591
func CanvasRef(canvas *Canvas) *Canvas {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	__ret := C.ps_canvas_ref(ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Canvas)(unsafe.Pointer(&__ret))
	return __v
}

// CanvasUnref function as declared in include/picasso.h:603
func CanvasUnref(canvas *Canvas) {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	C.ps_canvas_unref(ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
}

// CanvasGetSize function as declared in include/picasso.h:618
func CanvasGetSize(canvas *Canvas, rsize *Size) Bool {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	crsize, crsizeAllocMap := rsize.PassRef()
	__ret := C.ps_canvas_get_size(ccanvas, crsize)
	runtime.KeepAlive(crsizeAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// CanvasGetFormat function as declared in include/picasso.h:633
func CanvasGetFormat(canvas *Canvas) ColorFormat {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	__ret := C.ps_canvas_get_format(ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := (ColorFormat)(__ret)
	return __v
}

// CanvasSetMask function as declared in include/picasso.h:644
func CanvasSetMask(canvas *Canvas, mask *Mask) {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	cmask, cmaskAllocMap := (*C.ps_mask)(unsafe.Pointer(mask)), cgoAllocsUnknown
	C.ps_canvas_set_mask(ccanvas, cmask)
	runtime.KeepAlive(cmaskAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
}

// CanvasResetMask function as declared in include/picasso.h:654
func CanvasResetMask(canvas *Canvas) {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	C.ps_canvas_reset_mask(ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
}

// CanvasBitblt function as declared in include/picasso.h:671
func CanvasBitblt(src *Canvas, rect *Rect, dst []Canvas, location []Point) {
	csrc, csrcAllocMap := (*C.ps_canvas)(unsafe.Pointer(src)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	cdst, cdstAllocMap := (*C.ps_canvas)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dst)).Data)), cgoAllocsUnknown
	clocation, clocationAllocMap := unpackArgSPoint(location)
	C.ps_canvas_bitblt(csrc, crect, cdst, clocation)
	packSPoint(location, clocation)
	runtime.KeepAlive(clocationAllocMap)
	runtime.KeepAlive(cdstAllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(csrcAllocMap)
}

// ImageCreate function as declared in include/picasso.h:696
func ImageCreate(fmt ColorFormat, width int32, height int32) *Image {
	cfmt, cfmtAllocMap := (C.ps_color_format)(fmt), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	__ret := C.ps_image_create(cfmt, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageCreateWithData function as declared in include/picasso.h:717
func ImageCreateWithData(data *Byte, fmt ColorFormat, width int32, height int32, pitch int32) *Image {
	cdata, cdataAllocMap := (*C.ps_byte)(unsafe.Pointer(data)), cgoAllocsUnknown
	cfmt, cfmtAllocMap := (C.ps_color_format)(fmt), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	cpitch, cpitchAllocMap := (C.int32_t)(pitch), cgoAllocsUnknown
	__ret := C.ps_image_create_with_data(cdata, cfmt, cwidth, cheight, cpitch)
	runtime.KeepAlive(cpitchAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageCreateFromData function as declared in include/picasso.h:738
func ImageCreateFromData(data *Byte, fmt ColorFormat, width int32, height int32, pitch int32) *Image {
	cdata, cdataAllocMap := (*C.ps_byte)(unsafe.Pointer(data)), cgoAllocsUnknown
	cfmt, cfmtAllocMap := (C.ps_color_format)(fmt), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	cpitch, cpitchAllocMap := (C.int32_t)(pitch), cgoAllocsUnknown
	__ret := C.ps_image_create_from_data(cdata, cfmt, cwidth, cheight, cpitch)
	runtime.KeepAlive(cpitchAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageCreateCompatible function as declared in include/picasso.h:758
func ImageCreateCompatible(canvas *Canvas, width int32, height int32) *Image {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	__ret := C.ps_image_create_compatible(ccanvas, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageCreateFromCanvas function as declared in include/picasso.h:776
func ImageCreateFromCanvas(canvas *Canvas, rect *Rect) *Image {
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	__ret := C.ps_image_create_from_canvas(ccanvas, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(ccanvasAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageCreateFromImage function as declared in include/picasso.h:794
func ImageCreateFromImage(img *Image, rect *Rect) *Image {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	__ret := C.ps_image_create_from_image(cimg, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cimgAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageRef function as declared in include/picasso.h:810
func ImageRef(img *Image) *Image {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	__ret := C.ps_image_ref(cimg)
	runtime.KeepAlive(cimgAllocMap)
	__v := *(**Image)(unsafe.Pointer(&__ret))
	return __v
}

// ImageUnref function as declared in include/picasso.h:822
func ImageUnref(img *Image) {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	C.ps_image_unref(cimg)
	runtime.KeepAlive(cimgAllocMap)
}

// ImageSetAllowTransparent function as declared in include/picasso.h:833
func ImageSetAllowTransparent(img *Image, allow Bool) {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	callow, callowAllocMap := (C.ps_bool)(allow), cgoAllocsUnknown
	C.ps_image_set_allow_transparent(cimg, callow)
	runtime.KeepAlive(callowAllocMap)
	runtime.KeepAlive(cimgAllocMap)
}

// ImageSetTransparentColor function as declared in include/picasso.h:844
func ImageSetTransparentColor(img *Image, color *Color) {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_image_set_transparent_color(cimg, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cimgAllocMap)
}

// ImageGetSize function as declared in include/picasso.h:859
func ImageGetSize(img *Image, rsize *Size) Bool {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	crsize, crsizeAllocMap := rsize.PassRef()
	__ret := C.ps_image_get_size(cimg, crsize)
	runtime.KeepAlive(crsizeAllocMap)
	runtime.KeepAlive(cimgAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// ImageGetFormat function as declared in include/picasso.h:874
func ImageGetFormat(img *Image) ColorFormat {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	__ret := C.ps_image_get_format(cimg)
	runtime.KeepAlive(cimgAllocMap)
	__v := (ColorFormat)(__ret)
	return __v
}

// PatternCreateImage function as declared in include/picasso.h:914
func PatternCreateImage(img *Image, xWrap WrapType, yWrap WrapType, transform []Matrix) *Pattern {
	cimg, cimgAllocMap := (*C.ps_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	cxWrap, cxWrapAllocMap := (C.ps_wrap_type)(xWrap), cgoAllocsUnknown
	cyWrap, cyWrapAllocMap := (C.ps_wrap_type)(yWrap), cgoAllocsUnknown
	ctransform, ctransformAllocMap := (*C.ps_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&transform)).Data)), cgoAllocsUnknown
	__ret := C.ps_pattern_create_image(cimg, cxWrap, cyWrap, ctransform)
	runtime.KeepAlive(ctransformAllocMap)
	runtime.KeepAlive(cyWrapAllocMap)
	runtime.KeepAlive(cxWrapAllocMap)
	runtime.KeepAlive(cimgAllocMap)
	__v := *(**Pattern)(unsafe.Pointer(&__ret))
	return __v
}

// PatternTransform function as declared in include/picasso.h:926
func PatternTransform(pattern *Pattern, matrix *Matrix) {
	cpattern, cpatternAllocMap := (*C.ps_pattern)(unsafe.Pointer(pattern)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_pattern_transform(cpattern, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cpatternAllocMap)
}

// PatternRef function as declared in include/picasso.h:941
func PatternRef(pattern *Pattern) *Pattern {
	cpattern, cpatternAllocMap := (*C.ps_pattern)(unsafe.Pointer(pattern)), cgoAllocsUnknown
	__ret := C.ps_pattern_ref(cpattern)
	runtime.KeepAlive(cpatternAllocMap)
	__v := *(**Pattern)(unsafe.Pointer(&__ret))
	return __v
}

// PatternUnref function as declared in include/picasso.h:952
func PatternUnref(pattern *Pattern) {
	cpattern, cpatternAllocMap := (*C.ps_pattern)(unsafe.Pointer(pattern)), cgoAllocsUnknown
	C.ps_pattern_unref(cpattern)
	runtime.KeepAlive(cpatternAllocMap)
}

// GradientCreateLinear function as declared in include/picasso.h:995
func GradientCreateLinear(spread GradientSpread, start *Point, end []Point) *Gradient {
	cspread, cspreadAllocMap := (C.ps_gradient_spread)(spread), cgoAllocsUnknown
	cstart, cstartAllocMap := start.PassRef()
	cend, cendAllocMap := unpackArgSPoint(end)
	__ret := C.ps_gradient_create_linear(cspread, cstart, cend)
	packSPoint(end, cend)
	runtime.KeepAlive(cendAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cspreadAllocMap)
	__v := *(**Gradient)(unsafe.Pointer(&__ret))
	return __v
}

// GradientCreateRadial function as declared in include/picasso.h:1016
func GradientCreateRadial(spread GradientSpread, start *Point, sradius float32, end []Point, eradius float32) *Gradient {
	cspread, cspreadAllocMap := (C.ps_gradient_spread)(spread), cgoAllocsUnknown
	cstart, cstartAllocMap := start.PassRef()
	csradius, csradiusAllocMap := (C.float)(sradius), cgoAllocsUnknown
	cend, cendAllocMap := unpackArgSPoint(end)
	ceradius, ceradiusAllocMap := (C.float)(eradius), cgoAllocsUnknown
	__ret := C.ps_gradient_create_radial(cspread, cstart, csradius, cend, ceradius)
	runtime.KeepAlive(ceradiusAllocMap)
	packSPoint(end, cend)
	runtime.KeepAlive(cendAllocMap)
	runtime.KeepAlive(csradiusAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cspreadAllocMap)
	__v := *(**Gradient)(unsafe.Pointer(&__ret))
	return __v
}

// GradientCreateConic function as declared in include/picasso.h:1036
func GradientCreateConic(spread GradientSpread, origin *Point, sangle float32) *Gradient {
	cspread, cspreadAllocMap := (C.ps_gradient_spread)(spread), cgoAllocsUnknown
	corigin, coriginAllocMap := origin.PassRef()
	csangle, csangleAllocMap := (C.float)(sangle), cgoAllocsUnknown
	__ret := C.ps_gradient_create_conic(cspread, corigin, csangle)
	runtime.KeepAlive(csangleAllocMap)
	runtime.KeepAlive(coriginAllocMap)
	runtime.KeepAlive(cspreadAllocMap)
	__v := *(**Gradient)(unsafe.Pointer(&__ret))
	return __v
}

// GradientTransform function as declared in include/picasso.h:1049
func GradientTransform(gradient *Gradient, matrix *Matrix) {
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_gradient_transform(cgradient, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cgradientAllocMap)
}

// GradientRef function as declared in include/picasso.h:1065
func GradientRef(gradient *Gradient) *Gradient {
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	__ret := C.ps_gradient_ref(cgradient)
	runtime.KeepAlive(cgradientAllocMap)
	__v := *(**Gradient)(unsafe.Pointer(&__ret))
	return __v
}

// GradientUnref function as declared in include/picasso.h:1077
func GradientUnref(gradient *Gradient) {
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	C.ps_gradient_unref(cgradient)
	runtime.KeepAlive(cgradientAllocMap)
}

// GradientAddColorStop function as declared in include/picasso.h:1089
func GradientAddColorStop(gradient *Gradient, offset float32, color []Color) {
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.float)(offset), cgoAllocsUnknown
	ccolor, ccolorAllocMap := unpackArgSColor(color)
	C.ps_gradient_add_color_stop(cgradient, coffset, ccolor)
	packSColor(color, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cgradientAllocMap)
}

// GradientClearColorStops function as declared in include/picasso.h:1100
func GradientClearColorStops(gradient *Gradient) {
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	C.ps_gradient_clear_color_stops(cgradient)
	runtime.KeepAlive(cgradientAllocMap)
}

// MaskCreate function as declared in include/picasso.h:1123
func MaskCreate(width int32, height int32) *Mask {
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	__ret := C.ps_mask_create(cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	__v := *(**Mask)(unsafe.Pointer(&__ret))
	return __v
}

// MaskCreateWithData function as declared in include/picasso.h:1142
func MaskCreateWithData(data *Byte, width int32, height int32) *Mask {
	cdata, cdataAllocMap := (*C.ps_byte)(unsafe.Pointer(data)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.int32_t)(width), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.int32_t)(height), cgoAllocsUnknown
	__ret := C.ps_mask_create_with_data(cdata, cwidth, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	__v := *(**Mask)(unsafe.Pointer(&__ret))
	return __v
}

// MaskRef function as declared in include/picasso.h:1157
func MaskRef(mask *Mask) *Mask {
	cmask, cmaskAllocMap := (*C.ps_mask)(unsafe.Pointer(mask)), cgoAllocsUnknown
	__ret := C.ps_mask_ref(cmask)
	runtime.KeepAlive(cmaskAllocMap)
	__v := *(**Mask)(unsafe.Pointer(&__ret))
	return __v
}

// MaskUnref function as declared in include/picasso.h:1168
func MaskUnref(mask *Mask) {
	cmask, cmaskAllocMap := (*C.ps_mask)(unsafe.Pointer(mask)), cgoAllocsUnknown
	C.ps_mask_unref(cmask)
	runtime.KeepAlive(cmaskAllocMap)
}

// MaskAddColorFilter function as declared in include/picasso.h:1180
func MaskAddColorFilter(mask *Mask, color *Color) {
	cmask, cmaskAllocMap := (*C.ps_mask)(unsafe.Pointer(mask)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_mask_add_color_filter(cmask, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cmaskAllocMap)
}

// MaskClearColorFilters function as declared in include/picasso.h:1190
func MaskClearColorFilters(mask *Mask) {
	cmask, cmaskAllocMap := (*C.ps_mask)(unsafe.Pointer(mask)), cgoAllocsUnknown
	C.ps_mask_clear_color_filters(cmask)
	runtime.KeepAlive(cmaskAllocMap)
}

// SetSourceColor function as declared in include/picasso.h:1213
func SetSourceColor(ctx *Context, color *Color) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_set_source_color(cctx, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetSourceImage function as declared in include/picasso.h:1224
func SetSourceImage(ctx *Context, image *Image) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, cimageAllocMap := (*C.ps_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ps_set_source_image(cctx, cimage)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetSourcePattern function as declared in include/picasso.h:1235
func SetSourcePattern(ctx *Context, pattern *Pattern) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpattern, cpatternAllocMap := (*C.ps_pattern)(unsafe.Pointer(pattern)), cgoAllocsUnknown
	C.ps_set_source_pattern(cctx, cpattern)
	runtime.KeepAlive(cpatternAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetSourceGradient function as declared in include/picasso.h:1246
func SetSourceGradient(ctx *Context, gradient *Gradient) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	C.ps_set_source_gradient(cctx, cgradient)
	runtime.KeepAlive(cgradientAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetSourceCanvas function as declared in include/picasso.h:1257
func SetSourceCanvas(ctx *Context, canvas *Canvas) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	C.ps_set_source_canvas(cctx, ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetLineCap function as declared in include/picasso.h:1294
func SetLineCap(ctx *Context, lineCap LineCap) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clineCap, clineCapAllocMap := (C.ps_line_cap)(lineCap), cgoAllocsUnknown
	C.ps_set_line_cap(cctx, clineCap)
	runtime.KeepAlive(clineCapAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetLineJoin function as declared in include/picasso.h:1332
func SetLineJoin(ctx *Context, lineJoin LineJoin) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clineJoin, clineJoinAllocMap := (C.ps_line_join)(lineJoin), cgoAllocsUnknown
	C.ps_set_line_join(cctx, clineJoin)
	runtime.KeepAlive(clineJoinAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetLineInnerJoin function as declared in include/picasso.h:1366
func SetLineInnerJoin(ctx *Context, lineInnerJoin LineInnerJoin) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	clineInnerJoin, clineInnerJoinAllocMap := (C.ps_line_inner_join)(lineInnerJoin), cgoAllocsUnknown
	C.ps_set_line_inner_join(cctx, clineInnerJoin)
	runtime.KeepAlive(clineInnerJoinAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetLineWidth function as declared in include/picasso.h:1384
func SetLineWidth(ctx *Context, width float32) float32 {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.float)(width), cgoAllocsUnknown
	__ret := C.ps_set_line_width(cctx, cwidth)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// SetMiterLimit function as declared in include/picasso.h:1402
func SetMiterLimit(ctx *Context, limit float32) float32 {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	climit, climitAllocMap := (C.float)(limit), cgoAllocsUnknown
	__ret := C.ps_set_miter_limit(cctx, climit)
	runtime.KeepAlive(climitAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// SetStrokeColor function as declared in include/picasso.h:1415
func SetStrokeColor(ctx *Context, color *Color) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_set_stroke_color(cctx, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetStrokeImage function as declared in include/picasso.h:1428
func SetStrokeImage(ctx *Context, image *Image) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cimage, cimageAllocMap := (*C.ps_image)(unsafe.Pointer(image)), cgoAllocsUnknown
	C.ps_set_stroke_image(cctx, cimage)
	runtime.KeepAlive(cimageAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetStrokePattern function as declared in include/picasso.h:1441
func SetStrokePattern(ctx *Context, pattern *Pattern) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpattern, cpatternAllocMap := (*C.ps_pattern)(unsafe.Pointer(pattern)), cgoAllocsUnknown
	C.ps_set_stroke_pattern(cctx, cpattern)
	runtime.KeepAlive(cpatternAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetStrokeGradient function as declared in include/picasso.h:1454
func SetStrokeGradient(ctx *Context, gradient *Gradient) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cgradient, cgradientAllocMap := (*C.ps_gradient)(unsafe.Pointer(gradient)), cgoAllocsUnknown
	C.ps_set_stroke_gradient(cctx, cgradient)
	runtime.KeepAlive(cgradientAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetStrokeCanvas function as declared in include/picasso.h:1467
func SetStrokeCanvas(ctx *Context, canvas *Canvas) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccanvas, ccanvasAllocMap := (*C.ps_canvas)(unsafe.Pointer(canvas)), cgoAllocsUnknown
	C.ps_set_stroke_canvas(cctx, ccanvas)
	runtime.KeepAlive(ccanvasAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetLineDash function as declared in include/picasso.h:1482
func SetLineDash(ctx *Context, start float32, dashes []float32, numDashes uint32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstart, cstartAllocMap := (C.float)(start), cgoAllocsUnknown
	cdashes, cdashesAllocMap := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dashes)).Data)), cgoAllocsUnknown
	cnumDashes, cnumDashesAllocMap := (C.uint32_t)(numDashes), cgoAllocsUnknown
	C.ps_set_line_dash(cctx, cstart, cdashes, cnumDashes)
	runtime.KeepAlive(cnumDashesAllocMap)
	runtime.KeepAlive(cdashesAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ResetLineDash function as declared in include/picasso.h:1494
func ResetLineDash(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_reset_line_dash(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// SetShadow function as declared in include/picasso.h:1514
func SetShadow(ctx *Context, xOffset float32, yOffset float32, blur float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cxOffset, cxOffsetAllocMap := (C.float)(xOffset), cgoAllocsUnknown
	cyOffset, cyOffsetAllocMap := (C.float)(yOffset), cgoAllocsUnknown
	cblur, cblurAllocMap := (C.float)(blur), cgoAllocsUnknown
	C.ps_set_shadow(cctx, cxOffset, cyOffset, cblur)
	runtime.KeepAlive(cblurAllocMap)
	runtime.KeepAlive(cyOffsetAllocMap)
	runtime.KeepAlive(cxOffsetAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetShadowColor function as declared in include/picasso.h:1525
func SetShadowColor(ctx *Context, color *Color) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_set_shadow_color(cctx, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ResetShadow function as declared in include/picasso.h:1535
func ResetShadow(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_reset_shadow(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// SetCompositeOperator function as declared in include/picasso.h:1629
func SetCompositeOperator(ctx *Context, composite Composite) Composite {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccomposite, ccompositeAllocMap := (C.ps_composite)(composite), cgoAllocsUnknown
	__ret := C.ps_set_composite_operator(cctx, ccomposite)
	runtime.KeepAlive(ccompositeAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Composite)(__ret)
	return __v
}

// SetFilter function as declared in include/picasso.h:1675
func SetFilter(ctx *Context, filter Filter) Filter {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfilter, cfilterAllocMap := (C.ps_filter)(filter), cgoAllocsUnknown
	__ret := C.ps_set_filter(cctx, cfilter)
	runtime.KeepAlive(cfilterAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Filter)(__ret)
	return __v
}

// SetFillRule function as declared in include/picasso.h:1709
func SetFillRule(ctx *Context, rule FillRule) FillRule {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crule, cruleAllocMap := (C.ps_fill_rule)(rule), cgoAllocsUnknown
	__ret := C.ps_set_fill_rule(cctx, crule)
	runtime.KeepAlive(cruleAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (FillRule)(__ret)
	return __v
}

// SetAlpha function as declared in include/picasso.h:1726
func SetAlpha(ctx *Context, alpha float32) float32 {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	calpha, calphaAllocMap := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.ps_set_alpha(cctx, calpha)
	runtime.KeepAlive(calphaAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// SetGamma function as declared in include/picasso.h:1743
func SetGamma(ctx *Context, gamma float32) float32 {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cgamma, cgammaAllocMap := (C.float)(gamma), cgoAllocsUnknown
	__ret := C.ps_set_gamma(cctx, cgamma)
	runtime.KeepAlive(cgammaAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// SetAntialias function as declared in include/picasso.h:1754
func SetAntialias(ctx *Context, antialias Bool) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cantialias, cantialiasAllocMap := (C.ps_bool)(antialias), cgoAllocsUnknown
	C.ps_set_antialias(cctx, cantialias)
	runtime.KeepAlive(cantialiasAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetBlur function as declared in include/picasso.h:1771
func SetBlur(ctx *Context, blur float32) float32 {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cblur, cblurAllocMap := (C.float)(blur), cgoAllocsUnknown
	__ret := C.ps_set_blur(cctx, cblur)
	runtime.KeepAlive(cblurAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (float32)(__ret)
	return __v
}

// Stroke function as declared in include/picasso.h:1789
func Stroke(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_stroke(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Fill function as declared in include/picasso.h:1800
func Fill(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_fill(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Paint function as declared in include/picasso.h:1811
func Paint(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_paint(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Clear function as declared in include/picasso.h:1821
func Clear(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_clear(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Clip function as declared in include/picasso.h:1839
func Clip(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_clip(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// ClipPath function as declared in include/picasso.h:1851
func ClipPath(ctx *Context, path *Path, rule FillRule) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	crule, cruleAllocMap := (C.ps_fill_rule)(rule), cgoAllocsUnknown
	C.ps_clip_path(cctx, cpath, crule)
	runtime.KeepAlive(cruleAllocMap)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ClipRect function as declared in include/picasso.h:1862
func ClipRect(ctx *Context, rect *Rect) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_clip_rect(cctx, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ScissorRect function as declared in include/picasso.h:1876
func ScissorRect(ctx *Context, rect *Rect) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_scissor_rect(cctx, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ClipRects function as declared in include/picasso.h:1888
func ClipRects(ctx *Context, rects *Rect, numRects uint32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crects, crectsAllocMap := rects.PassRef()
	cnumRects, cnumRectsAllocMap := (C.uint32_t)(numRects), cgoAllocsUnknown
	C.ps_clip_rects(cctx, crects, cnumRects)
	runtime.KeepAlive(cnumRectsAllocMap)
	runtime.KeepAlive(crectsAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ResetClip function as declared in include/picasso.h:1898
func ResetClip(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_reset_clip(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Save function as declared in include/picasso.h:1934
func Save(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_save(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Restore function as declared in include/picasso.h:1944
func Restore(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_restore(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// FontCreate function as declared in include/picasso.h:2007
func FontCreate(name string, charset Charset, size float32, weight int32, italic Bool) *Font {
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	ccharset, ccharsetAllocMap := (C.ps_charset)(charset), cgoAllocsUnknown
	csize, csizeAllocMap := (C.float)(size), cgoAllocsUnknown
	cweight, cweightAllocMap := (C.int32_t)(weight), cgoAllocsUnknown
	citalic, citalicAllocMap := (C.ps_bool)(italic), cgoAllocsUnknown
	__ret := C.ps_font_create(cname, ccharset, csize, cweight, citalic)
	runtime.KeepAlive(citalicAllocMap)
	runtime.KeepAlive(cweightAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(ccharsetAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// FontCreateCopy function as declared in include/picasso.h:2023
func FontCreateCopy(font *Font) *Font {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.ps_font_create_copy(cfont)
	runtime.KeepAlive(cfontAllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// FontRef function as declared in include/picasso.h:2038
func FontRef(font *Font) *Font {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.ps_font_ref(cfont)
	runtime.KeepAlive(cfontAllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// FontUnref function as declared in include/picasso.h:2049
func FontUnref(font *Font) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	C.ps_font_unref(cfont)
	runtime.KeepAlive(cfontAllocMap)
}

// FontSetSize function as declared in include/picasso.h:2061
func FontSetSize(font *Font, size float32) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.float)(size), cgoAllocsUnknown
	C.ps_font_set_size(cfont, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cfontAllocMap)
}

// FontSetWeight function as declared in include/picasso.h:2073
func FontSetWeight(font *Font, weight int32) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cweight, cweightAllocMap := (C.int32_t)(weight), cgoAllocsUnknown
	C.ps_font_set_weight(cfont, cweight)
	runtime.KeepAlive(cweightAllocMap)
	runtime.KeepAlive(cfontAllocMap)
}

// FontSetItalic function as declared in include/picasso.h:2085
func FontSetItalic(font *Font, italic Bool) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	citalic, citalicAllocMap := (C.ps_bool)(italic), cgoAllocsUnknown
	C.ps_font_set_italic(cfont, citalic)
	runtime.KeepAlive(citalicAllocMap)
	runtime.KeepAlive(cfontAllocMap)
}

// FontSetCharset function as declared in include/picasso.h:2097
func FontSetCharset(font *Font, charset Charset) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	ccharset, ccharsetAllocMap := (C.ps_charset)(charset), cgoAllocsUnknown
	C.ps_font_set_charset(cfont, ccharset)
	runtime.KeepAlive(ccharsetAllocMap)
	runtime.KeepAlive(cfontAllocMap)
}

// FontSetHint function as declared in include/picasso.h:2109
func FontSetHint(font *Font, hint Bool) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	chint, chintAllocMap := (C.ps_bool)(hint), cgoAllocsUnknown
	C.ps_font_set_hint(cfont, chint)
	runtime.KeepAlive(chintAllocMap)
	runtime.KeepAlive(cfontAllocMap)
}

// FontSetFlip function as declared in include/picasso.h:2121
func FontSetFlip(font *Font, flip Bool) {
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	cflip, cflipAllocMap := (C.ps_bool)(flip), cgoAllocsUnknown
	C.ps_font_set_flip(cfont, cflip)
	runtime.KeepAlive(cflipAllocMap)
	runtime.KeepAlive(cfontAllocMap)
}

// GetFontInfo function as declared in include/picasso.h:2160
func GetFontInfo(ctx *Context, info *FontInfo) Bool {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.ps_get_font_info(cctx, cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// SetFont function as declared in include/picasso.h:2176
func SetFont(ctx *Context, font *Font) *Font {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfont, cfontAllocMap := (*C.ps_font)(unsafe.Pointer(font)), cgoAllocsUnknown
	__ret := C.ps_set_font(cctx, cfont)
	runtime.KeepAlive(cfontAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// GetTextExtent function as declared in include/picasso.h:2218
func GetTextExtent(ctx *Context, text unsafe.Pointer, length uint32, rsize []Size) Bool {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ctext, ctextAllocMap := text, cgoAllocsUnknown
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	crsize, crsizeAllocMap := unpackArgSSize(rsize)
	__ret := C.ps_get_text_extent(cctx, ctext, clength, crsize)
	packSSize(rsize, crsize)
	runtime.KeepAlive(crsizeAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// SetTextColor function as declared in include/picasso.h:2230
func SetTextColor(ctx *Context, color *Color) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_set_text_color(cctx, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetTextStrokeColor function as declared in include/picasso.h:2242
func SetTextStrokeColor(ctx *Context, color *Color) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := color.PassRef()
	C.ps_set_text_stroke_color(cctx, ccolor)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// TextTransform function as declared in include/picasso.h:2256
func TextTransform(ctx *Context, matrix *Matrix) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_text_transform(cctx, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetTextMatrix function as declared in include/picasso.h:2270
func SetTextMatrix(ctx *Context, matrix *Matrix) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_set_text_matrix(cctx, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetTextRenderType function as declared in include/picasso.h:2282
func SetTextRenderType(ctx *Context, kind TextType) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.ps_text_type)(kind), cgoAllocsUnknown
	C.ps_set_text_render_type(cctx, ckind)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetTextAntialias function as declared in include/picasso.h:2294
func SetTextAntialias(ctx *Context, antialias Bool) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cantialias, cantialiasAllocMap := (C.ps_bool)(antialias), cgoAllocsUnknown
	C.ps_set_text_antialias(cctx, cantialias)
	runtime.KeepAlive(cantialiasAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetTextKerning function as declared in include/picasso.h:2306
func SetTextKerning(ctx *Context, kerning Bool) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ckerning, ckerningAllocMap := (C.ps_bool)(kerning), cgoAllocsUnknown
	C.ps_set_text_kerning(cctx, ckerning)
	runtime.KeepAlive(ckerningAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// TextOutLength function as declared in include/picasso.h:2320
func TextOutLength(ctx *Context, x float32, y float32, text string, length uint32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.float)(y), cgoAllocsUnknown
	text = safeString(text)
	ctext, ctextAllocMap := unpackPCharString(text)
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	C.ps_text_out_length(cctx, cx, cy, ctext, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(text)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// WideTextOutLength function as declared in include/picasso.h:2335
func WideTextOutLength(ctx *Context, x float32, y float32, text []Uchar16, length uint32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.float)(y), cgoAllocsUnknown
	ctext, ctextAllocMap := (*C.ps_uchar16)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	C.ps_wide_text_out_length(cctx, cx, cy, ctext, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// DrawText function as declared in include/picasso.h:2395
func DrawText(ctx *Context, area *Rect, text unsafe.Pointer, length uint32, kind DrawTextType, align TextAlign) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carea, careaAllocMap := area.PassRef()
	ctext, ctextAllocMap := text, cgoAllocsUnknown
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.ps_draw_text_type)(kind), cgoAllocsUnknown
	calign, calignAllocMap := (C.ps_text_align)(align), cgoAllocsUnknown
	C.ps_draw_text(cctx, carea, ctext, clength, ckind, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(careaAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// GetGlyph function as declared in include/picasso.h:2410
func GetGlyph(ctx *Context, ch int32, glyph []Glyph) Bool {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cch, cchAllocMap := (C.int32_t)(ch), cgoAllocsUnknown
	cglyph, cglyphAllocMap := unpackArgSGlyph(glyph)
	__ret := C.ps_get_glyph(cctx, cch, cglyph)
	packSGlyph(glyph, cglyph)
	runtime.KeepAlive(cglyphAllocMap)
	runtime.KeepAlive(cchAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// ShowGlyphs function as declared in include/picasso.h:2424
func ShowGlyphs(ctx *Context, x float32, y float32, glyphs []Glyph, length uint32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.float)(y), cgoAllocsUnknown
	cglyphs, cglyphsAllocMap := unpackArgSGlyph(glyphs)
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	C.ps_show_glyphs(cctx, cx, cy, cglyphs, clength)
	runtime.KeepAlive(clengthAllocMap)
	packSGlyph(glyphs, cglyphs)
	runtime.KeepAlive(cglyphsAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// GetPathFromGlyph function as declared in include/picasso.h:2439
func GetPathFromGlyph(ctx *Context, glyph *Glyph, path []Path) Bool {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cglyph, cglyphAllocMap := glyph.PassRef()
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&path)).Data)), cgoAllocsUnknown
	__ret := C.ps_get_path_from_glyph(cctx, cglyph, cpath)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cglyphAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// GlyphGetExtent function as declared in include/picasso.h:2455
func GlyphGetExtent(glyph *Glyph, rsize *Size) Bool {
	cglyph, cglyphAllocMap := glyph.PassRef()
	crsize, crsizeAllocMap := rsize.PassRef()
	__ret := C.ps_glyph_get_extent(cglyph, crsize)
	runtime.KeepAlive(crsizeAllocMap)
	runtime.KeepAlive(cglyphAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// Translate function as declared in include/picasso.h:2474
func Translate(ctx *Context, tx float32, ty float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccctx, ccctxAllocMap := (C.float)(tx), cgoAllocsUnknown
	cty, ctyAllocMap := (C.float)(ty), cgoAllocsUnknown
	C.ps_translate(cctx, ccctx, cty)
	runtime.KeepAlive(ctyAllocMap)
	runtime.KeepAlive(ccctxAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Scale function as declared in include/picasso.h:2486
func Scale(ctx *Context, sx float32, sy float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	csx, csxAllocMap := (C.float)(sx), cgoAllocsUnknown
	csy, csyAllocMap := (C.float)(sy), cgoAllocsUnknown
	C.ps_scale(cctx, csx, csy)
	runtime.KeepAlive(csyAllocMap)
	runtime.KeepAlive(csxAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Shear function as declared in include/picasso.h:2498
func Shear(ctx *Context, shx float32, shy float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cshx, cshxAllocMap := (C.float)(shx), cgoAllocsUnknown
	cshy, cshyAllocMap := (C.float)(shy), cgoAllocsUnknown
	C.ps_shear(cctx, cshx, cshy)
	runtime.KeepAlive(cshyAllocMap)
	runtime.KeepAlive(cshxAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Rotate function as declared in include/picasso.h:2509
func Rotate(ctx *Context, angle float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cangle, cangleAllocMap := (C.float)(angle), cgoAllocsUnknown
	C.ps_rotate(cctx, cangle)
	runtime.KeepAlive(cangleAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Identity function as declared in include/picasso.h:2519
func Identity(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_identity(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// Transform function as declared in include/picasso.h:2530
func Transform(ctx *Context, matrix *Matrix) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_transform(cctx, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetMatrix function as declared in include/picasso.h:2541
func SetMatrix(ctx *Context, matrix *Matrix) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_set_matrix(cctx, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// GetMatrix function as declared in include/picasso.h:2554
func GetMatrix(ctx *Context, matrix *Matrix) Bool {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.ps_get_matrix(cctx, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// WorldToViewport function as declared in include/picasso.h:2565
func WorldToViewport(ctx *Context, point *Point) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_world_to_viewport(cctx, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// ViewportToWorld function as declared in include/picasso.h:2576
func ViewportToWorld(ctx *Context, point *Point) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_viewport_to_world(cctx, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// MatrixCreate function as declared in include/picasso.h:2596
func MatrixCreate() *Matrix {
	__ret := C.ps_matrix_create()
	__v := *(**Matrix)(unsafe.Pointer(&__ret))
	return __v
}

// MatrixCreateInit function as declared in include/picasso.h:2617
func MatrixCreateInit(sx float32, shy float32, shx float32, sy float32, tx float32, ty float32) *Matrix {
	csx, csxAllocMap := (C.float)(sx), cgoAllocsUnknown
	cshy, cshyAllocMap := (C.float)(shy), cgoAllocsUnknown
	cshx, cshxAllocMap := (C.float)(shx), cgoAllocsUnknown
	csy, csyAllocMap := (C.float)(sy), cgoAllocsUnknown
	ctx, ctxAllocMap := (C.float)(tx), cgoAllocsUnknown
	cty, ctyAllocMap := (C.float)(ty), cgoAllocsUnknown
	__ret := C.ps_matrix_create_init(csx, cshy, cshx, csy, ctx, cty)
	runtime.KeepAlive(ctyAllocMap)
	runtime.KeepAlive(ctxAllocMap)
	runtime.KeepAlive(csyAllocMap)
	runtime.KeepAlive(cshxAllocMap)
	runtime.KeepAlive(cshyAllocMap)
	runtime.KeepAlive(csxAllocMap)
	__v := *(**Matrix)(unsafe.Pointer(&__ret))
	return __v
}

// MatrixCreateCopy function as declared in include/picasso.h:2633
func MatrixCreateCopy(matrix *Matrix) *Matrix {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.ps_matrix_create_copy(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := *(**Matrix)(unsafe.Pointer(&__ret))
	return __v
}

// MatrixRef function as declared in include/picasso.h:2648
func MatrixRef(matrix *Matrix) *Matrix {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.ps_matrix_ref(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := *(**Matrix)(unsafe.Pointer(&__ret))
	return __v
}

// MatrixUnref function as declared in include/picasso.h:2659
func MatrixUnref(matrix *Matrix) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_matrix_unref(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixInit function as declared in include/picasso.h:2676
func MatrixInit(matrix *Matrix, sx float32, shy float32, shx float32, sy float32, tx float32, ty float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	csx, csxAllocMap := (C.float)(sx), cgoAllocsUnknown
	cshy, cshyAllocMap := (C.float)(shy), cgoAllocsUnknown
	cshx, cshxAllocMap := (C.float)(shx), cgoAllocsUnknown
	csy, csyAllocMap := (C.float)(sy), cgoAllocsUnknown
	ctx, ctxAllocMap := (C.float)(tx), cgoAllocsUnknown
	cty, ctyAllocMap := (C.float)(ty), cgoAllocsUnknown
	C.ps_matrix_init(cmatrix, csx, cshy, cshx, csy, ctx, cty)
	runtime.KeepAlive(ctyAllocMap)
	runtime.KeepAlive(ctxAllocMap)
	runtime.KeepAlive(csyAllocMap)
	runtime.KeepAlive(cshxAllocMap)
	runtime.KeepAlive(cshyAllocMap)
	runtime.KeepAlive(csxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixTranslate function as declared in include/picasso.h:2689
func MatrixTranslate(matrix *Matrix, tx float32, ty float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	ctx, ctxAllocMap := (C.float)(tx), cgoAllocsUnknown
	cty, ctyAllocMap := (C.float)(ty), cgoAllocsUnknown
	C.ps_matrix_translate(cmatrix, ctx, cty)
	runtime.KeepAlive(ctyAllocMap)
	runtime.KeepAlive(ctxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixScale function as declared in include/picasso.h:2701
func MatrixScale(matrix *Matrix, sx float32, sy float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	csx, csxAllocMap := (C.float)(sx), cgoAllocsUnknown
	csy, csyAllocMap := (C.float)(sy), cgoAllocsUnknown
	C.ps_matrix_scale(cmatrix, csx, csy)
	runtime.KeepAlive(csyAllocMap)
	runtime.KeepAlive(csxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixRotate function as declared in include/picasso.h:2712
func MatrixRotate(matrix *Matrix, angle float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	cangle, cangleAllocMap := (C.float)(angle), cgoAllocsUnknown
	C.ps_matrix_rotate(cmatrix, cangle)
	runtime.KeepAlive(cangleAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixShear function as declared in include/picasso.h:2724
func MatrixShear(matrix *Matrix, shx float32, shy float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	cshx, cshxAllocMap := (C.float)(shx), cgoAllocsUnknown
	cshy, cshyAllocMap := (C.float)(shy), cgoAllocsUnknown
	C.ps_matrix_shear(cmatrix, cshx, cshy)
	runtime.KeepAlive(cshyAllocMap)
	runtime.KeepAlive(cshxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixInvert function as declared in include/picasso.h:2734
func MatrixInvert(matrix *Matrix) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_matrix_invert(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixIdentity function as declared in include/picasso.h:2744
func MatrixIdentity(matrix *Matrix) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_matrix_identity(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixFlipX function as declared in include/picasso.h:2754
func MatrixFlipX(matrix *Matrix) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_matrix_flip_x(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixFlipY function as declared in include/picasso.h:2764
func MatrixFlipY(matrix *Matrix) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	C.ps_matrix_flip_y(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixMultiply function as declared in include/picasso.h:2776
func MatrixMultiply(result *Matrix, a *Matrix, b []Matrix) {
	cresult, cresultAllocMap := (*C.ps_matrix)(unsafe.Pointer(result)), cgoAllocsUnknown
	ca, caAllocMap := (*C.ps_matrix)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, cbAllocMap := (*C.ps_matrix)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	C.ps_matrix_multiply(cresult, ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cresultAllocMap)
}

// MatrixIsIdentity function as declared in include/picasso.h:2788
func MatrixIsIdentity(matrix *Matrix) Bool {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.ps_matrix_is_identity(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// MatrixIsEqual function as declared in include/picasso.h:2801
func MatrixIsEqual(a *Matrix, b *Matrix) Bool {
	ca, caAllocMap := (*C.ps_matrix)(unsafe.Pointer(a)), cgoAllocsUnknown
	cb, cbAllocMap := (*C.ps_matrix)(unsafe.Pointer(b)), cgoAllocsUnknown
	__ret := C.ps_matrix_is_equal(ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// MatrixGetDeterminant function as declared in include/picasso.h:2813
func MatrixGetDeterminant(matrix *Matrix) float32 {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	__ret := C.ps_matrix_get_determinant(cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (float32)(__ret)
	return __v
}

// MatrixSetTranslateFactor function as declared in include/picasso.h:2825
func MatrixSetTranslateFactor(matrix *Matrix, tx float32, ty float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	ctx, ctxAllocMap := (C.float)(tx), cgoAllocsUnknown
	cty, ctyAllocMap := (C.float)(ty), cgoAllocsUnknown
	C.ps_matrix_set_translate_factor(cmatrix, ctx, cty)
	runtime.KeepAlive(ctyAllocMap)
	runtime.KeepAlive(ctxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixGetTranslateFactor function as declared in include/picasso.h:2839
func MatrixGetTranslateFactor(matrix *Matrix, tx *float32, ty []float32) Bool {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	ctx, ctxAllocMap := (*C.float)(unsafe.Pointer(tx)), cgoAllocsUnknown
	cty, ctyAllocMap := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ty)).Data)), cgoAllocsUnknown
	__ret := C.ps_matrix_get_translate_factor(cmatrix, ctx, cty)
	runtime.KeepAlive(ctyAllocMap)
	runtime.KeepAlive(ctxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// MatrixSetScaleFactor function as declared in include/picasso.h:2851
func MatrixSetScaleFactor(matrix *Matrix, sx float32, sy float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	csx, csxAllocMap := (C.float)(sx), cgoAllocsUnknown
	csy, csyAllocMap := (C.float)(sy), cgoAllocsUnknown
	C.ps_matrix_set_scale_factor(cmatrix, csx, csy)
	runtime.KeepAlive(csyAllocMap)
	runtime.KeepAlive(csxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixGetScaleFactor function as declared in include/picasso.h:2865
func MatrixGetScaleFactor(matrix *Matrix, sx *float32, sy []float32) Bool {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	csx, csxAllocMap := (*C.float)(unsafe.Pointer(sx)), cgoAllocsUnknown
	csy, csyAllocMap := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sy)).Data)), cgoAllocsUnknown
	__ret := C.ps_matrix_get_scale_factor(cmatrix, csx, csy)
	runtime.KeepAlive(csyAllocMap)
	runtime.KeepAlive(csxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// MatrixSetShearFactor function as declared in include/picasso.h:2877
func MatrixSetShearFactor(matrix *Matrix, shx float32, shy float32) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	cshx, cshxAllocMap := (C.float)(shx), cgoAllocsUnknown
	cshy, cshyAllocMap := (C.float)(shy), cgoAllocsUnknown
	C.ps_matrix_set_shear_factor(cmatrix, cshx, cshy)
	runtime.KeepAlive(cshyAllocMap)
	runtime.KeepAlive(cshxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixGetShearFactor function as declared in include/picasso.h:2891
func MatrixGetShearFactor(matrix *Matrix, shx *float32, shy []float32) Bool {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	cshx, cshxAllocMap := (*C.float)(unsafe.Pointer(shx)), cgoAllocsUnknown
	cshy, cshyAllocMap := (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&shy)).Data)), cgoAllocsUnknown
	__ret := C.ps_matrix_get_shear_factor(cmatrix, cshx, cshy)
	runtime.KeepAlive(cshyAllocMap)
	runtime.KeepAlive(cshxAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// MatrixTransformPoint function as declared in include/picasso.h:2902
func MatrixTransformPoint(matrix *Matrix, point *Point) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_matrix_transform_point(cmatrix, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixTransformRect function as declared in include/picasso.h:2913
func MatrixTransformRect(matrix *Matrix, rect *Rect) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_matrix_transform_rect(cmatrix, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// MatrixTransformPath function as declared in include/picasso.h:2924
func MatrixTransformPath(matrix *Matrix, path *Path) {
	cmatrix, cmatrixAllocMap := (*C.ps_matrix)(unsafe.Pointer(matrix)), cgoAllocsUnknown
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.ps_matrix_transform_path(cmatrix, cpath)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
}

// NewSubPath function as declared in include/picasso.h:2951
func NewSubPath(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_new_sub_path(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// AddSubPath function as declared in include/picasso.h:2962
func AddSubPath(ctx *Context, path *Path) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.ps_add_sub_path(cctx, cpath)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// SetPath function as declared in include/picasso.h:2973
func SetPath(ctx *Context, path *Path) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.ps_set_path(cctx, cpath)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// GetPath function as declared in include/picasso.h:2986
func GetPath(ctx *Context, path *Path) Bool {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.ps_get_path(cctx, cpath)
	runtime.KeepAlive(cpathAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// ClosePath function as declared in include/picasso.h:2996
func ClosePath(ctx *Context) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.ps_close_path(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// MoveTo function as declared in include/picasso.h:3008
func MoveTo(ctx *Context, point *Point) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_move_to(cctx, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// LineTo function as declared in include/picasso.h:3020
func LineTo(ctx *Context, point *Point) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_line_to(cctx, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// BezierCurveTo function as declared in include/picasso.h:3035
func BezierCurveTo(ctx *Context, fcp *Point, scp []Point, ep []Point) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfcp, cfcpAllocMap := fcp.PassRef()
	cscp, cscpAllocMap := unpackArgSPoint(scp)
	cep, cepAllocMap := unpackArgSPoint(ep)
	C.ps_bezier_curve_to(cctx, cfcp, cscp, cep)
	packSPoint(ep, cep)
	runtime.KeepAlive(cepAllocMap)
	packSPoint(scp, cscp)
	runtime.KeepAlive(cscpAllocMap)
	runtime.KeepAlive(cfcpAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// QuadCurveTo function as declared in include/picasso.h:3049
func QuadCurveTo(ctx *Context, cp *Point, ep []Point) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccp, ccpAllocMap := cp.PassRef()
	cep, cepAllocMap := unpackArgSPoint(ep)
	C.ps_quad_curve_to(cctx, ccp, cep)
	packSPoint(ep, cep)
	runtime.KeepAlive(cepAllocMap)
	runtime.KeepAlive(ccpAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Arc function as declared in include/picasso.h:3066
func Arc(ctx *Context, cp *Point, radius float32, sangle float32, eangle float32, clockwise Bool) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	ccp, ccpAllocMap := cp.PassRef()
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	csangle, csangleAllocMap := (C.float)(sangle), cgoAllocsUnknown
	ceangle, ceangleAllocMap := (C.float)(eangle), cgoAllocsUnknown
	cclockwise, cclockwiseAllocMap := (C.ps_bool)(clockwise), cgoAllocsUnknown
	C.ps_arc(cctx, ccp, cradius, csangle, ceangle, cclockwise)
	runtime.KeepAlive(cclockwiseAllocMap)
	runtime.KeepAlive(ceangleAllocMap)
	runtime.KeepAlive(csangleAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccpAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// TangentArc function as declared in include/picasso.h:3081
func TangentArc(ctx *Context, rect *Rect, sangle float32, sweep float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	csangle, csangleAllocMap := (C.float)(sangle), cgoAllocsUnknown
	csweep, csweepAllocMap := (C.float)(sweep), cgoAllocsUnknown
	C.ps_tangent_arc(cctx, crect, csangle, csweep)
	runtime.KeepAlive(csweepAllocMap)
	runtime.KeepAlive(csangleAllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Rectangle function as declared in include/picasso.h:3093
func Rectangle(ctx *Context, rect *Rect) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_rectangle(cctx, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// RoundedRect function as declared in include/picasso.h:3114
func RoundedRect(ctx *Context, rect *Rect, ltx float32, lty float32, rtx float32, rty float32, lbx float32, lby float32, rbx float32, rby float32) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	cltx, cltxAllocMap := (C.float)(ltx), cgoAllocsUnknown
	clty, cltyAllocMap := (C.float)(lty), cgoAllocsUnknown
	crtx, crtxAllocMap := (C.float)(rtx), cgoAllocsUnknown
	crty, crtyAllocMap := (C.float)(rty), cgoAllocsUnknown
	clbx, clbxAllocMap := (C.float)(lbx), cgoAllocsUnknown
	clby, clbyAllocMap := (C.float)(lby), cgoAllocsUnknown
	crbx, crbxAllocMap := (C.float)(rbx), cgoAllocsUnknown
	crby, crbyAllocMap := (C.float)(rby), cgoAllocsUnknown
	C.ps_rounded_rect(cctx, crect, cltx, clty, crtx, crty, clbx, clby, crbx, crby)
	runtime.KeepAlive(crbyAllocMap)
	runtime.KeepAlive(crbxAllocMap)
	runtime.KeepAlive(clbyAllocMap)
	runtime.KeepAlive(clbxAllocMap)
	runtime.KeepAlive(crtyAllocMap)
	runtime.KeepAlive(crtxAllocMap)
	runtime.KeepAlive(cltyAllocMap)
	runtime.KeepAlive(cltxAllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// Ellipse function as declared in include/picasso.h:3127
func Ellipse(ctx *Context, rect *Rect) {
	cctx, cctxAllocMap := (*C.ps_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_ellipse(cctx, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// PathCreate function as declared in include/picasso.h:3147
func PathCreate() *Path {
	__ret := C.ps_path_create()
	__v := *(**Path)(unsafe.Pointer(&__ret))
	return __v
}

// PathCreateCopy function as declared in include/picasso.h:3162
func PathCreateCopy(path *Path) *Path {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.ps_path_create_copy(cpath)
	runtime.KeepAlive(cpathAllocMap)
	__v := *(**Path)(unsafe.Pointer(&__ret))
	return __v
}

// PathRef function as declared in include/picasso.h:3177
func PathRef(path *Path) *Path {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.ps_path_ref(cpath)
	runtime.KeepAlive(cpathAllocMap)
	__v := *(**Path)(unsafe.Pointer(&__ret))
	return __v
}

// PathUnref function as declared in include/picasso.h:3188
func PathUnref(path *Path) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.ps_path_unref(cpath)
	runtime.KeepAlive(cpathAllocMap)
}

// PathMoveTo function as declared in include/picasso.h:3200
func PathMoveTo(path *Path, point *Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_path_move_to(cpath, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathLineTo function as declared in include/picasso.h:3212
func PathLineTo(path *Path, point *Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	C.ps_path_line_to(cpath, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathTangentArcTo function as declared in include/picasso.h:3226
func PathTangentArcTo(path *Path, radius float32, tp []Point, ep []Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	ctp, ctpAllocMap := unpackArgSPoint(tp)
	cep, cepAllocMap := unpackArgSPoint(ep)
	C.ps_path_tangent_arc_to(cpath, cradius, ctp, cep)
	packSPoint(ep, cep)
	runtime.KeepAlive(cepAllocMap)
	packSPoint(tp, ctp)
	runtime.KeepAlive(ctpAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathArcTo function as declared in include/picasso.h:3245
func PathArcTo(path *Path, radiusx float32, radiusy float32, angle float32, largeArc Bool, clockwise Bool, ep []Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cradiusx, cradiusxAllocMap := (C.float)(radiusx), cgoAllocsUnknown
	cradiusy, cradiusyAllocMap := (C.float)(radiusy), cgoAllocsUnknown
	cangle, cangleAllocMap := (C.float)(angle), cgoAllocsUnknown
	clargeArc, clargeArcAllocMap := (C.ps_bool)(largeArc), cgoAllocsUnknown
	cclockwise, cclockwiseAllocMap := (C.ps_bool)(clockwise), cgoAllocsUnknown
	cep, cepAllocMap := unpackArgSPoint(ep)
	C.ps_path_arc_to(cpath, cradiusx, cradiusy, cangle, clargeArc, cclockwise, cep)
	packSPoint(ep, cep)
	runtime.KeepAlive(cepAllocMap)
	runtime.KeepAlive(cclockwiseAllocMap)
	runtime.KeepAlive(clargeArcAllocMap)
	runtime.KeepAlive(cangleAllocMap)
	runtime.KeepAlive(cradiusyAllocMap)
	runtime.KeepAlive(cradiusxAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathBezierTo function as declared in include/picasso.h:3260
func PathBezierTo(path *Path, fcp *Point, scp []Point, ep []Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cfcp, cfcpAllocMap := fcp.PassRef()
	cscp, cscpAllocMap := unpackArgSPoint(scp)
	cep, cepAllocMap := unpackArgSPoint(ep)
	C.ps_path_bezier_to(cpath, cfcp, cscp, cep)
	packSPoint(ep, cep)
	runtime.KeepAlive(cepAllocMap)
	packSPoint(scp, cscp)
	runtime.KeepAlive(cscpAllocMap)
	runtime.KeepAlive(cfcpAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathQuadTo function as declared in include/picasso.h:3274
func PathQuadTo(path *Path, cp *Point, ep []Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	ccp, ccpAllocMap := cp.PassRef()
	cep, cepAllocMap := unpackArgSPoint(ep)
	C.ps_path_quad_to(cpath, ccp, cep)
	packSPoint(ep, cep)
	runtime.KeepAlive(cepAllocMap)
	runtime.KeepAlive(ccpAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathSubClose function as declared in include/picasso.h:3284
func PathSubClose(path *Path) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.ps_path_sub_close(cpath)
	runtime.KeepAlive(cpathAllocMap)
}

// PathGetLength function as declared in include/picasso.h:3299
func PathGetLength(path *Path) float32 {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.ps_path_get_length(cpath)
	runtime.KeepAlive(cpathAllocMap)
	__v := (float32)(__ret)
	return __v
}

// PathClear function as declared in include/picasso.h:3309
func PathClear(path *Path) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	C.ps_path_clear(cpath)
	runtime.KeepAlive(cpathAllocMap)
}

// PathIsEmpty function as declared in include/picasso.h:3319
func PathIsEmpty(path *Path) Bool {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.ps_path_is_empty(cpath)
	runtime.KeepAlive(cpathAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// PathGetVertexCount function as declared in include/picasso.h:3334
func PathGetVertexCount(path *Path) uint32 {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	__ret := C.ps_path_get_vertex_count(cpath)
	runtime.KeepAlive(cpathAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// PathGetVertex function as declared in include/picasso.h:3381
func PathGetVertex(path *Path, index uint32, point []Point) PathCmd {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cindex, cindexAllocMap := (C.uint32_t)(index), cgoAllocsUnknown
	cpoint, cpointAllocMap := unpackArgSPoint(point)
	__ret := C.ps_path_get_vertex(cpath, cindex, cpoint)
	packSPoint(point, cpoint)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(cpathAllocMap)
	__v := (PathCmd)(__ret)
	return __v
}

// PathBoundingRect function as declared in include/picasso.h:3397
func PathBoundingRect(path *Path, rect *Rect) Bool {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	__ret := C.ps_path_bounding_rect(cpath, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cpathAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// PathContains function as declared in include/picasso.h:3411
func PathContains(path *Path, point *Point, rule FillRule) Bool {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	crule, cruleAllocMap := (C.ps_fill_rule)(rule), cgoAllocsUnknown
	__ret := C.ps_path_contains(cpath, cpoint, crule)
	runtime.KeepAlive(cruleAllocMap)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cpathAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// PathStrokeContains function as declared in include/picasso.h:3426
func PathStrokeContains(path *Path, point *Point, width float32) Bool {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cpoint, cpointAllocMap := point.PassRef()
	cwidth, cwidthAllocMap := (C.float)(width), cgoAllocsUnknown
	__ret := C.ps_path_stroke_contains(cpath, cpoint, cwidth)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(cpointAllocMap)
	runtime.KeepAlive(cpathAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// PathAddLine function as declared in include/picasso.h:3439
func PathAddLine(path *Path, p1 *Point, p2 []Point) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cp1, cp1AllocMap := p1.PassRef()
	cp2, cp2AllocMap := unpackArgSPoint(p2)
	C.ps_path_add_line(cpath, cp1, cp2)
	packSPoint(p2, cp2)
	runtime.KeepAlive(cp2AllocMap)
	runtime.KeepAlive(cp1AllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathAddArc function as declared in include/picasso.h:3455
func PathAddArc(path *Path, cp *Point, radius float32, sangle float32, eangle float32, clockwise Bool) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	ccp, ccpAllocMap := cp.PassRef()
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	csangle, csangleAllocMap := (C.float)(sangle), cgoAllocsUnknown
	ceangle, ceangleAllocMap := (C.float)(eangle), cgoAllocsUnknown
	cclockwise, cclockwiseAllocMap := (C.ps_bool)(clockwise), cgoAllocsUnknown
	C.ps_path_add_arc(cpath, ccp, cradius, csangle, ceangle, cclockwise)
	runtime.KeepAlive(cclockwiseAllocMap)
	runtime.KeepAlive(ceangleAllocMap)
	runtime.KeepAlive(csangleAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccpAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathAddRect function as declared in include/picasso.h:3467
func PathAddRect(path *Path, rect *Rect) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_path_add_rect(cpath, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathAddEllipse function as declared in include/picasso.h:3478
func PathAddEllipse(path *Path, rect *Rect) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	C.ps_path_add_ellipse(cpath, crect)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathAddRoundedRect function as declared in include/picasso.h:3498
func PathAddRoundedRect(path *Path, rect *Rect, ltx float32, lty float32, rtx float32, rty float32, lbx float32, lby float32, rbx float32, rby float32) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	crect, crectAllocMap := rect.PassRef()
	cltx, cltxAllocMap := (C.float)(ltx), cgoAllocsUnknown
	clty, cltyAllocMap := (C.float)(lty), cgoAllocsUnknown
	crtx, crtxAllocMap := (C.float)(rtx), cgoAllocsUnknown
	crty, crtyAllocMap := (C.float)(rty), cgoAllocsUnknown
	clbx, clbxAllocMap := (C.float)(lbx), cgoAllocsUnknown
	clby, clbyAllocMap := (C.float)(lby), cgoAllocsUnknown
	crbx, crbxAllocMap := (C.float)(rbx), cgoAllocsUnknown
	crby, crbyAllocMap := (C.float)(rby), cgoAllocsUnknown
	C.ps_path_add_rounded_rect(cpath, crect, cltx, clty, crtx, crty, clbx, clby, crbx, crby)
	runtime.KeepAlive(crbyAllocMap)
	runtime.KeepAlive(crbxAllocMap)
	runtime.KeepAlive(clbyAllocMap)
	runtime.KeepAlive(clbxAllocMap)
	runtime.KeepAlive(crtyAllocMap)
	runtime.KeepAlive(crtxAllocMap)
	runtime.KeepAlive(cltyAllocMap)
	runtime.KeepAlive(cltxAllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathAddSubPath function as declared in include/picasso.h:3510
func PathAddSubPath(path *Path, spath *Path) {
	cpath, cpathAllocMap := (*C.ps_path)(unsafe.Pointer(path)), cgoAllocsUnknown
	cspath, cspathAllocMap := (*C.ps_path)(unsafe.Pointer(spath)), cgoAllocsUnknown
	C.ps_path_add_sub_path(cpath, cspath)
	runtime.KeepAlive(cspathAllocMap)
	runtime.KeepAlive(cpathAllocMap)
}

// PathClipping function as declared in include/picasso.h:3546
func PathClipping(result *Path, op PathOperation, a []Path, b []Path) {
	cresult, cresultAllocMap := (*C.ps_path)(unsafe.Pointer(result)), cgoAllocsUnknown
	cop, copAllocMap := (C.ps_path_operation)(op), cgoAllocsUnknown
	ca, caAllocMap := (*C.ps_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cb, cbAllocMap := (*C.ps_path)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&b)).Data)), cgoAllocsUnknown
	C.ps_path_clipping(cresult, cop, ca, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(copAllocMap)
	runtime.KeepAlive(cresultAllocMap)
}
